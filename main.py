import os
import asyncio
import logging
import aiohttp
import numpy as np
import time
import hmac
import hashlib
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# --- ‚ñº‚ñº‚ñº –ù–û–í–Ü –Ü–ú–ü–û–†–¢–ò –î–õ–Ø –®–Ü –¢–ê –ù–û–í–ò–ù ‚ñº‚ñº‚ñº ---
from newsapi import NewsApiClient
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

# --- ‚ñº‚ñº‚ñº –ü–ï–†–í–ò–ù–ù–ï –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø NLTK ‚ñº‚ñº‚ñº ---
# –¶–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑.
# –Ø–∫—â–æ –≤–∏–Ω–∏–∫–∞—î –ø–æ–º–∏–ª–∫–∞, —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫, –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç,
# –∞ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–Ω–æ–≤—É –∑–∞–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ.
# nltk.download('vader_lexicon')
# ----------------------------------------------------

# --------------------------
# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --------------------------
# API –∫–ª—é—á—ñ —Ç–∞ —Ç–æ–∫–µ–Ω–∏
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
NEWS_API_KEY = os.getenv("NEWS_API_KEY")

BASE_URL = "https://api.binance.com"

# --------------------------
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
newsapi = NewsApiClient(api_key=NEWS_API_KEY)
sia = SentimentIntensityAnalyzer()
# --------------------------

user_coins = {}
PAGE_SIZE = 30


# (–§—É–Ω–∫—Ü—ñ—ó calculate_rsi, calculate_ema, get_usdt_pairs, get_page, build_coin_keyboard, get_binance_data, get_account_balance –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –ë–ï–ó –ó–ú–Ü–ù)
# ... (—Å–∫–æ–ø—ñ—é–π—Ç–µ —ó—Ö –∑—ñ —Å–≤–æ–≥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫–æ–¥—É)
def calculate_rsi(prices, period=14):
    deltas = np.diff(prices)
    seed = deltas[:period]
    up = seed[seed >= 0].sum() / period
    down = -seed[seed < 0].sum() / period
    rs = up / down if down != 0 else 0
    rsi = np.zeros_like(prices)
    rsi[:period] = 100. - 100. / (1. + rs)
    for i in range(period, len(prices)):
        delta = deltas[i - 1]
        upval = max(delta, 0)
        downval = -min(delta, 0)
        up = (up * (period - 1) + upval) / period
        down = (down * (period - 1) + downval) / period
        rs = up / down if down != 0 else 0
        rsi[i] = 100. - 100. / (1. + rs)
    return rsi[-1]


def calculate_ema(prices, period=10):
    ema = [np.mean(prices[:period])]
    k = 2 / (period + 1)
    for price in prices[period:]:
        ema.append(price * k + ema[-1] * (1 - k))
    return ema[-1]


# ... (–≤–µ—Å—å –≤–∞—à –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–¥ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)

# --- ‚ñº‚ñº‚ñº –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø-–°–ö–†–ò–ù–ï–† ‚ñº‚ñº‚ñº ---
async def market_screener(session):
    """
    –†–æ–±–∏—Ç—å –æ–¥–∏–Ω –∑–∞–ø–∏—Ç –¥–æ Binance, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
    —ñ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à—ñ –º–æ–Ω–µ—Ç–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É.
    """
    logger.info("–ó–∞–ø—É—Å–∫–∞—é —Å–∫—Ä–∏–Ω–µ—Ä —Ä–∏–Ω–∫—É...")
    promising_coins = set()  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ set –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
    url = f"{BASE_URL}/api/v3/ticker/24hr"

    try:
        async with session.get(url) as resp:
            all_tickers = await resp.json()

        for ticker in all_tickers:
            symbol = ticker['symbol']
            # --- –ö—Ä–∏—Ç–µ—Ä—ñ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó ---
            # 1. –¢—ñ–ª—å–∫–∏ –ø–∞—Ä–∏ –¥–æ USDT
            # 2. –û–±'—î–º —Ç–æ—Ä–≥—ñ–≤ > 2,000,000 USDT –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
            # 3. –¶—ñ–Ω–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—è –±—ñ–ª—å—à–µ –Ω—ñ–∂ –Ω–∞ 5% –≤ –±—É–¥—å-—è–∫—É —Å—Ç–æ—Ä–æ–Ω—É
            if (symbol.endswith('USDT') and
                    float(ticker['quoteVolume']) > 2000000 and
                    abs(float(ticker['priceChangePercent'])) > 5):
                promising_coins.add(symbol)

        logger.info(f"–°–∫—Ä–∏–Ω–µ—Ä –∑–Ω–∞–π—à–æ–≤ {len(promising_coins)} –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∏—Ö –º–æ–Ω–µ—Ç.")
        return promising_coins

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ä–æ–±–æ—Ç—ñ —Å–∫—Ä–∏–Ω–µ—Ä–∞ —Ä–∏–Ω–∫—É: {e}")
        return set()  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π –Ω–∞–±—ñ—Ä —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏

async def get_usdt_pairs(session):
    url = f"{BASE_URL}/api/v3/exchangeInfo"
    async with session.get(url) as resp:
        data = await resp.json()
    pairs = [
        s["symbol"] for s in data["symbols"]
        if s["quoteAsset"] == "USDT" and s["status"] == "TRADING"
    ]
    return sorted(pairs)


def get_page(coins, page: int):
    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    return coins[start:end]


# --- ‚ñº‚ñº‚ñº –û–ù–û–í–õ–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –°–¢–í–û–†–ï–ù–ù–Ø –ö–õ–ê–í–Ü–ê–¢–£–† ‚ñº‚ñº‚ñº ---
def build_coin_keyboard(coins, page, action, all_count):
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–Ω–µ—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    keyboard = [
        [InlineKeyboardButton(c, callback_data=f"{action}_{c}")]
        for c in coins
    ]

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó (–ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó)
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{action}_{page - 1}"))
    if (page + 1) * PAGE_SIZE < all_count:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_{action}_{page + 1}"))

    # –Ø–∫—â–æ —î –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó, –¥–æ–¥–∞—î–º–æ —ó—Ö —è–∫ –æ–¥–∏–Ω —Ä—è–¥–æ–∫
    if nav_buttons:
        keyboard.append(nav_buttons)

    # --- –ù–û–í–ê –ß–ê–°–¢–ò–ù–ê: –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ –∑ –∫–Ω–æ–ø–∫–æ—é "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" ---
    # –¶—è –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ –∑'—è–≤–ª—è—Ç–∏—Å—è –∑–∞–≤–∂–¥–∏ –≤–Ω–∏–∑—É
    keyboard.append([InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_start")])

    return InlineKeyboardMarkup(keyboard)


async def get_binance_data(session, symbol="DOGEUSDT", interval="1h", limit=100):
    url = f"{BASE_URL}/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
    async with session.get(url) as resp:
        data = await resp.json()
    closes = [float(k[4]) for k in data]
    volumes = [float(k[5]) for k in data]
    price = float(data[-1][4])
    return closes, volumes, price


async def get_account_balance(session):
    try:
        timestamp = int(time.time() * 1000)
        query_string = f"timestamp={timestamp}"
        signature = hmac.new(BINANCE_API_SECRET.encode(), query_string.encode(), hashlib.sha256).hexdigest()
        url = f"{BASE_URL}/api/v3/account?{query_string}&signature={signature}"
        headers = {"X-MBX-APIKEY": BINANCE_API_KEY}
        async with session.get(url, headers=headers) as resp:
            data = await resp.json()
        balances = {item['asset']: float(item['free']) for item in data.get('balances', []) if float(item['free']) > 0}
        return balances
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {e}")
        return {}


# --------------------------
# --- ‚ñº‚ñº‚ñº –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£ –ù–û–í–ò–ù ‚ñº‚ñº‚ñº ---
# --------------------------
def get_sentiment_analysis(asset_name):
    """–û—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É—î —ó—Ö —Ç–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å."""
    try:
        # –®—É–∫–∞—î–º–æ –Ω–æ–≤–∏–Ω–∏ –∑–∞ –Ω–∞–∑–≤–æ—é –º–æ–Ω–µ—Ç–∏ (–Ω–∞–ø—Ä. "Bitcoin") –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å
        all_articles = newsapi.get_everything(q=asset_name,
                                              language='en',
                                              sort_by='publishedAt',
                                              page_size=10)  # –ë–µ—Ä–µ–º–æ 10 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–æ–≤–∏–Ω

        if not all_articles['articles']:
            return 0.0  # –Ø–∫—â–æ –Ω–æ–≤–∏–Ω –Ω–µ–º–∞—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—É –æ—Ü—ñ–Ω–∫—É

        # –ó–±–∏—Ä–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞ –æ–ø–∏—Å–∏ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
        full_text = " ".join([
            f"{article['title']}. {article['description']}"
            for article in all_articles['articles'] if article['description']
        ])

        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é VADER
        # polarity_scores –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫, –Ω–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å 'compound'
        # 'compound' - —Ü–µ —Å—É–º–∞—Ä–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –≤—ñ–¥ -1 (–Ω–µ–≥–∞—Ç–∏–≤) –¥–æ +1 (–ø–æ–∑–∏—Ç–∏–≤)
        sentiment_score = sia.polarity_scores(full_text)['compound']
        return sentiment_score

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–±–æ –∞–Ω–∞–ª—ñ–∑—É –Ω–æ–≤–∏–Ω: {e}")
        return 0.0  # –£ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—É –æ—Ü—ñ–Ω–∫—É


# --------------------------
# --- ‚ñº‚ñº‚ñº –û–ù–û–í–õ–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø –ê–ù–ê–õ–Ü–ó–£ –ú–û–ù–ï–¢–ò ‚ñº‚ñº‚ñº ---
# --------------------------
async def analyze_coin(session, symbol, balances):
    try:
        closes, volumes, price = await get_binance_data(session, symbol)
        rsi = calculate_rsi(np.array(closes))
        ema10 = calculate_ema(np.array(closes), 10)
        ema50 = calculate_ema(np.array(closes), 50)
        vol_trend = "–∑—Ä–æ—Å—Ç–∞—î" if volumes[-1] > np.mean(volumes[-10:]) else "–ø–∞–¥–∞—î"
        asset = symbol.replace("USDT", "")
        balance = balances.get(asset, 0)

        # --- –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø –®–Ü ---
        sentiment_score = get_sentiment_analysis(asset)
        sentiment_label = "‚ö™Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π"
        if sentiment_score >= 0.1:
            sentiment_label = "üü¢ –ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π"
        elif sentiment_score <= -0.1:
            sentiment_label = "üî¥ –ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π"
        # ---------------------

        result = {
            "symbol": symbol, "price": price, "rsi": rsi, "ema10": ema10,
            "ema50": ema50, "volume_trend": vol_trend, "balance": balance,
            "sentiment_score": sentiment_score, "sentiment_label": sentiment_label,
            "recommendation": "‚ö™Ô∏è NEUTRAL (–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π)",
            "stop_loss": None, "take_profit": None
        }

        # --- –õ–û–ì–Ü–ö–ê –°–ò–ì–ù–ê–õ–£ –¢–ï–ü–ï–† –í–†–ê–•–û–í–£–Ñ –ù–ê–°–¢–†–Ü–ô –†–ò–ù–ö–£ ---
        # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É: —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ + –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π
        if rsi < 35 and ema10 > ema50 and vol_trend == "–∑—Ä–æ—Å—Ç–∞—î" and sentiment_score >= 0.1:
            result["recommendation"] = "üü¢ BUY (–°–∏–ª—å–Ω–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —Å–∏–≥–Ω–∞–ª, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π –Ω–æ–≤–∏–Ω–∞–º–∏)"
            result["stop_loss"] = price * 0.98
            result["take_profit"] = price * 1.05

        # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂: —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ + –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π
        elif rsi > 65 and ema10 < ema50 and sentiment_score <= -0.1:
            result["recommendation"] = "üî¥ SELL (–°–∏–ª—å–Ω–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —Å–∏–≥–Ω–∞–ª, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π –Ω–æ–≤–∏–Ω–∞–º–∏)"

        return result

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")
        return None


# --- –§—É–Ω–∫—Ü—ñ—ó start —Ç–∞ monitor –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –º–∞–π–∂–µ –±–µ–∑ –∑–º—ñ–Ω, –∞–ª–µ –º–∏ –æ–Ω–æ–≤–∏–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ –Ω–∏—Ö ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_coins.setdefault(user_id, [])

    # --- ‚ñº‚ñº‚ñº –ó–ú–Ü–ù–ï–ù–û: –î–û–î–ê–ù–û –ö–ù–û–ü–ö–£ –°–ö–ê–ù–ï–†–ê ‚ñº‚ñº‚ñº ---
    keyboard = [
        [InlineKeyboardButton("üîç –°–∫–∞–Ω–µ—Ä —Ä–∏–Ω–∫—É", callback_data="market_scanner")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", callback_data="add")],
        [InlineKeyboardButton("‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–Ω–µ—Ç—É", callback_data="remove")],
        [InlineKeyboardButton("üìã –ú–æ—ó –º–æ–Ω–µ—Ç–∏", callback_data="mycoins")],
    ]
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç üëã! –Ø —Ç–≤—ñ–π –∫—Ä–∏–ø—Ç–æ-–ø–æ–º—ñ—á–Ω–∏–∫.\n\n"
        f"‚Ä¢ –ù–∞—Ç–∏—Å–Ω–∏ **'–°–∫–∞–Ω–µ—Ä —Ä–∏–Ω–∫—É'**, —â–æ–± –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –º–æ–Ω–µ—Ç–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑.\n"
        f"‚Ä¢ –ê–±–æ –∫–µ—Ä—É–π —Å–≤–æ—ó–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º —Å–ø–∏—Å–∫–æ–º –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è.",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# --------------------------
# --- ‚ñº‚ñº‚ñº –û–ù–û–í–õ–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø –û–ë–†–û–ë–ö–ò –ö–ù–û–ü–û–ö ‚ñº‚ñº‚ñº ---
# --- (–ó–º—ñ–Ω–µ–Ω–æ –ª–∏—à–µ –±–ª–æ–∫ analyze_, —â–æ–± –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –®–Ü) ---
# --------------------------
# –ü–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–º—ñ–Ω—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ä—É —Ñ—É–Ω–∫—Ü—ñ—é button_handler –Ω–∞ —Ü—é
# –ü–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–º—ñ–Ω—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ä—É —Ñ—É–Ω–∫—Ü—ñ—é button_handler –Ω–∞ —Ü—é
# –ü–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–º—ñ–Ω—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ä—É —Ñ—É–Ω–∫—Ü—ñ—é button_handler –Ω–∞ —Ü—é
# –ü–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–º—ñ–Ω—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ä—É —Ñ—É–Ω–∫—Ü—ñ—é button_handler –Ω–∞ —Ü—é
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    async with aiohttp.ClientSession() as session:
        # --- –ë–õ–û–ö –°–ö–ê–ù–ï–†–ê –†–ò–ù–ö–£ ---
        if query.data == "market_scanner":
            await query.answer()
            await query.edit_message_text("‚è≥ –®—É–∫–∞—é –∞–∫—Ç–∏–≤–Ω—ñ –º–æ–Ω–µ—Ç–∏ –Ω–∞ —Ä–∏–Ω–∫—É...")

            promising_coins = await market_screener(session)

            if not promising_coins:
                keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_start")]]
                await query.edit_message_text(
                    "–ù–∞—Ä–∞–∑—ñ –Ω–∞ —Ä–∏–Ω–∫—É –Ω–µ–º–∞—î –º–æ–Ω–µ—Ç –∑ –≤–∏—Å–æ–∫–æ—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—é —Ç–∞ –æ–±'—î–º–æ–º.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return

            keyboard = []
            for coin in sorted(list(promising_coins)):
                button = [InlineKeyboardButton(f"‚ûï {coin}", callback_data=f"scanner_add_{coin}")]
                keyboard.append(button)

            keyboard.append([InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_start")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            message = (
                f"üìà **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∫–∞–Ω–µ—Ä–∞ —Ä–∏–Ω–∫—É:**\n\n"
                f"–û—Å—å —Å–ø–∏—Å–æ–∫ –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö –º–æ–Ω–µ—Ç. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –º–æ–Ω–µ—Ç—É, —â–æ–± –¥–æ–¥–∞—Ç–∏ —ó—ó –¥–æ –≤–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è:"
            )
            await query.edit_message_text(text=message, reply_markup=reply_markup)
            return

        # --- –ë–õ–û–ö –û–ë–†–û–ë–ö–ò –î–û–î–ê–í–ê–ù–ù–Ø –ó–Ü –°–ö–ê–ù–ï–†–ê ---
        elif query.data.startswith("scanner_add_"):
            coin = query.data.replace("scanner_add_", "")
            user_coins.setdefault(user_id, [])

            if coin not in user_coins[user_id]:
                user_coins[user_id].append(coin)
                await query.answer(text=f"‚úÖ {coin} –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É!", show_alert=False)
            else:
                await query.answer(text=f"‚ö†Ô∏è {coin} –≤–∂–µ —î —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É.", show_alert=False)
            return

        # --- –ë–õ–û–ö –ü–û–í–ï–†–ù–ï–ù–ù–Ø –í –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ ---
        elif query.data == "back_to_start":
            await query.answer()
            keyboard = [
                [InlineKeyboardButton("üîç –°–∫–∞–Ω–µ—Ä —Ä–∏–Ω–∫—É", callback_data="market_scanner")],
                [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", callback_data="add")],
                [InlineKeyboardButton("‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–Ω–µ—Ç—É", callback_data="remove")],
                [InlineKeyboardButton("üìã –ú–æ—ó –º–æ–Ω–µ—Ç–∏", callback_data="mycoins")],
            ]
            await query.edit_message_text(
                f"–ü—Ä–∏–≤—ñ—Ç üëã! –Ø —Ç–≤—ñ–π –∫—Ä–∏–ø—Ç–æ-–ø–æ–º—ñ—á–Ω–∏–∫.\n\n"
                f"‚Ä¢ –ù–∞—Ç–∏—Å–Ω–∏ **'–°–∫–∞–Ω–µ—Ä —Ä–∏–Ω–∫—É'**, —â–æ–± –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –º–æ–Ω–µ—Ç–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑.\n"
                f"‚Ä¢ –ê–±–æ –∫–µ—Ä—É–π —Å–≤–æ—ó–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º —Å–ø–∏—Å–∫–æ–º –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )

        # --- –ë–õ–û–ö "–î–û–î–ê–¢–ò –ú–û–ù–ï–¢–£" (–í–•–Ü–î –£ –ó–ê–ì–ê–õ–¨–ù–ò–ô –°–ü–ò–°–û–ö) ---
        elif query.data == "add":
            await query.answer()
            all_pairs = await get_usdt_pairs(session)
            page = 0
            coins_page = get_page(all_pairs, page)
            reply_markup = build_coin_keyboard(coins_page, page, "addcoin", len(all_pairs))
            await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è:", reply_markup=reply_markup)

        # --- –ë–õ–û–ö –ü–ï–†–ï–ì–û–†–¢–ê–ù–ù–Ø –°–¢–û–†–Ü–ù–û–ö –£ –ó–ê–ì–ê–õ–¨–ù–û–ú–£ –°–ü–ò–°–ö–£ ---
        elif query.data.startswith("page_addcoin_"):
            await query.answer()
            page = int(query.data.replace("page_addcoin_", ""))
            all_pairs = await get_usdt_pairs(session)
            coins_page = get_page(all_pairs, page)
            reply_markup = build_coin_keyboard(coins_page, page, "addcoin", len(all_pairs))
            await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è:", reply_markup=reply_markup)

        # --- ‚ñº‚ñº‚ñº –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –ë–õ–û–ö: –î–û–î–ê–í–ê–ù–ù–Ø –ú–û–ù–ï–¢–ò –Ü–ó –ó–ê–ì–ê–õ–¨–ù–û–ì–û –°–ü–ò–°–ö–£ ‚ñº‚ñº‚ñº ---
        elif query.data.startswith("addcoin_"):
            coin = query.data.replace("addcoin_", "")
            user_coins.setdefault(user_id, [])

            if coin not in user_coins[user_id]:
                user_coins[user_id].append(coin)
                # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–ª–∏–≤–∞—é—á–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —ñ –∑–∞–ª–∏—à–∞—î–º–æ—Å—å –Ω–∞ –º—ñ—Å—Ü—ñ
                await query.answer(text=f"‚úÖ {coin} –¥–æ–¥–∞–Ω–æ!", show_alert=False)
            else:
                # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–ª–∏–≤–∞—é—á–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —ñ –∑–∞–ª–∏—à–∞—î–º–æ—Å—å –Ω–∞ –º—ñ—Å—Ü—ñ
                await query.answer(text=f"‚ö†Ô∏è {coin} –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É.", show_alert=False)

            # –í–∞–∂–ª–∏–≤–æ! –ú–∏ –±—ñ–ª—å—à–µ –Ω–µ –∑–º—ñ–Ω—é—î–º–æ –µ–∫—Ä–∞–Ω, –∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.
            return

        # ... (—Ä–µ—à—Ç–∞ –∫–æ–¥—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
        elif query.data == "remove":
            await query.answer()
            coins = user_coins.get(user_id, [])
            if not coins:
                await query.edit_message_text("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
                return
            page = 0
            coins_page = get_page(coins, page)
            reply_markup = build_coin_keyboard(coins_page, page, "removecoin", len(coins))
            await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=reply_markup)

        elif query.data.startswith("page_removecoin_"):
            await query.answer()
            page = int(query.data.replace("page_removecoin_", ""))
            coins = user_coins.get(user_id, [])
            coins_page = get_page(coins, page)
            reply_markup = build_coin_keyboard(coins_page, page, "removecoin", len(coins))
            await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=reply_markup)

        elif query.data.startswith("removecoin_"):
            await query.answer()
            coin = query.data.replace("removecoin_", "")
            if coin in user_coins.get(user_id, []):
                user_coins[user_id].remove(coin)
                await query.edit_message_text(f"‚ùå {coin} –≤–∏–¥–∞–ª–µ–Ω–æ")
            else:
                await query.edit_message_text(f"‚ö†Ô∏è {coin} –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É")
            await asyncio.sleep(2)
            coins = user_coins.get(user_id, [])
            if not coins:
                keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_start")]]
                await query.edit_message_text("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=InlineKeyboardMarkup(keyboard))
                return
            page = 0
            coins_page = get_page(coins, page)
            reply_markup = build_coin_keyboard(coins_page, page, "removecoin", len(coins))
            await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=reply_markup)

        elif query.data == "mycoins":
            await query.answer()
            coins = user_coins.get(user_id, [])
            if not coins:
                await query.edit_message_text("–°–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö –º–æ–Ω–µ—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π.")
                return
            keyboard = [[InlineKeyboardButton(c, callback_data=f"analyze_{c}")] for c in coins]
            keyboard.append([InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_start")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("üìã –¢–≤–æ—ó –º–æ–Ω–µ—Ç–∏ (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –≥–ª–∏–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É):", reply_markup=reply_markup)

        elif query.data.startswith("analyze_"):
            await query.answer()
            coin = query.data.replace("analyze_", "")
            await query.edit_message_text(f"‚è≥ –†–æ–±–ª—é –≥–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑ {coin}...")
            balances = await get_account_balance(session)
            analysis_data = await analyze_coin(session, coin, balances)
            keyboard = [
                [
                    InlineKeyboardButton("‚¨ÖÔ∏è –î–æ —Å–ø–∏—Å–∫—É", callback_data="mycoins"),
                    InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_start")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            if not analysis_data:
                await query.edit_message_text(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è {coin}.", reply_markup=reply_markup)
                return

            asset_name = analysis_data["symbol"].replace("USDT", "")
            message = (
                f"üìä **{analysis_data['symbol']}**\n\n"
                f"üí∞ –¶—ñ–Ω–∞: `{analysis_data['price']:.6f}`\n"
                f"üì∞ –ù–∞—Å—Ç—Ä—ñ–π: **{analysis_data['sentiment_label']}** (`{analysis_data['sentiment_score']:.2f}`)\n"
                f"üìà RSI: `{analysis_data['rsi']:.2f}`\n\n"
                f"üìå **–°–∏–≥–Ω–∞–ª: {analysis_data['recommendation']}**"
            )
            if analysis_data["recommendation"].startswith("üü¢ BUY"):
                message += f"\n\n**–ü–ª–∞–Ω:**\nüõ°Ô∏è Stop-Loss: `{analysis_data['stop_loss']:.6f}`\nüéØ Take-Profit: `{analysis_data['take_profit']:.6f}`"
            await query.edit_message_text(text=message, reply_markup=reply_markup, parse_mode='Markdown')

# --- –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É ---
# --- ‚ñº‚ñº‚ñº –û–ù–û–í–õ–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ (–ì–Ü–ë–†–ò–î–ù–ê –í–ï–†–°–Ü–Ø) ‚ñº‚ñº‚ñº ---
async def monitor(app):
    async with aiohttp.ClientSession() as session:
        while True:
            # 1. –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫–∞–Ω–µ—Ä —Ä–∏–Ω–∫—É –û–î–ò–ù –†–ê–ó –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ü–∏–∫–ª—É.
            # –¶–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, –±–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–±–∏—Ç–∏ —Ü–µ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
            promising_coins_from_screener = await market_screener(session)

            if not promising_coins_from_screener:
                logger.info("–°–∫—Ä–∏–Ω–µ—Ä –Ω–µ –∑–Ω–∞–π—à–æ–≤ –∞–∫—Ç–∏–≤–Ω–∏—Ö –º–æ–Ω–µ—Ç.")

            # 2. –¢–µ–ø–µ—Ä –ø—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–æ–∂–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.
            for user_id, user_tracked_coins in user_coins.items():
                balances = await get_account_balance(session)

                # 3. ‚ñº‚ñº‚ñº –ö–õ–Æ–ß–û–í–ê –ó–ú–Ü–ù–ê: –°–¢–í–û–†–Æ–Ñ–ú–û –û–ë'–Ñ–î–ù–ê–ù–ò–ô –°–ü–ò–°–û–ö ‚ñº‚ñº‚ñº
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `set` –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤.
                # –Ø–∫—â–æ –º–æ–Ω–µ—Ç–∞ —î —ñ –≤ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —ñ –≤ —Å–∫–∞–Ω–µ—Ä—ñ, –≤–æ–Ω–∞ –±—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞ –ª–∏—à–µ —Ä–∞–∑.
                coins_to_analyze = set(user_tracked_coins) | promising_coins_from_screener

                if not coins_to_analyze:
                    continue  # –Ø–∫—â–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –º–æ–Ω–µ—Ç —ñ —Å–∫–∞–Ω–µ—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ.

                logger.info(f"–î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∞–Ω–∞–ª—ñ–∑—É—î—Ç—å—Å—è {len(coins_to_analyze)} –º–æ–Ω–µ—Ç.")
                messages = []
                # 4. –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –º–æ–Ω–µ—Ç–∏ –∑ –û–ë'–Ñ–î–ù–ê–ù–û–ì–û —Å–ø–∏—Å–∫—É.
                for coin in coins_to_analyze:
                    analysis_data = await analyze_coin(session, coin, balances)

                    if analysis_data and "NEUTRAL" not in analysis_data["recommendation"]:
                        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, –∑–≤—ñ–¥–∫–∏ –ø—Ä–∏–π—à–æ–≤ —Å–∏–≥–Ω–∞–ª, –¥–ª—è –±—ñ–ª—å—à —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
                        if coin in user_tracked_coins:
                            alert_type = "üö® **–°–∏–≥–Ω–∞–ª –ø–æ –≤–∞—à—ñ–π –º–æ–Ω–µ—Ç—ñ!** üö®"
                        else:
                            alert_type = "üî• **–°–∏–≥–Ω–∞–ª –∑—ñ —Å–∫–∞–Ω–µ—Ä–∞ —Ä–∏–Ω–∫—É!** üî•"

                        message = (
                            f"{alert_type}\n\n"
                            f"–ú–æ–Ω–µ—Ç–∞: **{analysis_data['symbol']}**\n"
                            f"üí∞ –¶—ñ–Ω–∞: `{analysis_data['price']:.6f}` USDT\n"
                            f"üì∞ –ù–∞—Å—Ç—Ä—ñ–π –Ω–æ–≤–∏–Ω: **{analysis_data['sentiment_label']}**\n"
                            f"üìå –°–∏–≥–Ω–∞–ª: **{analysis_data['recommendation']}**"
                        )
                        if analysis_data.get("stop_loss"):
                            message += (
                                f"\nüõ°Ô∏è Stop-Loss: `{analysis_data['stop_loss']:.6f}`\n"
                                f"üéØ Take-Profit: `{analysis_data['take_profit']:.6f}`"
                            )
                        messages.append(message)

                # 5. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–Ω–∞–π–¥–µ–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.
                if messages:
                    try:
                        full_message = "\n\n".join(messages)
                        await app.bot.send_message(chat_id=user_id, text=full_message, parse_mode='Markdown')
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")

            logger.info("–¶–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞ –≥–æ–¥–∏–Ω—É.")
            await asyncio.sleep(3600)


# --------------------------
# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è (–±–µ–∑ –∑–º—ñ–Ω)
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    async def on_startup(app):
        asyncio.create_task(monitor(app))

    app.post_init = on_startup
    app.run_polling()


if __name__ == "__main__":
    main()